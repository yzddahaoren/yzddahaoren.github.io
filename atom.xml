<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://g.yzddhr.me</id>
    <title>yzd-gridea</title>
    <updated>2019-08-07T02:20:08.399Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://g.yzddhr.me"/>
    <link rel="self" href="https://g.yzddhr.me/atom.xml"/>
    <subtitle>记录 :  思考 : 慎言</subtitle>
    <logo>https://g.yzddhr.me/images/avatar.png</logo>
    <icon>https://g.yzddhr.me/favicon.ico</icon>
    <rights>All rights reserved 2019, yzd-gridea</rights>
    <entry>
        <title type="html"><![CDATA[用过的博客程序大总结加推荐]]></title>
        <id>https://g.yzddhr.me/post/yong-guo-de-bo-ke-cheng-xu-da-zong-jie-jia-tui-jian</id>
        <link href="https://g.yzddhr.me/post/yong-guo-de-bo-ke-cheng-xu-da-zong-jie-jia-tui-jian">
        </link>
        <updated>2019-08-07T02:16:59.000Z</updated>
        <content type="html"><![CDATA[<p>用过的博客程序很不少了，比如一开始的WordPress到typecho到hexo到hugo到ghost到zblog，到halo到solo到gridea，虽然知道搞各种花里胡哨的博客没有什么用，重要的是博客的内容，但是一个用着不顺心的博客又怎么可能能坚持下去呢，所以我认为一个好的博客程序和好的主题还是很有必要的。</p>
<h2 id="更新">更新</h2>
<blockquote>
<p>2019-08-05 : 更新了博文，后面再更吧 😴</p>
</blockquote>
<h2 id="介绍">介绍</h2>
<ul>
<li>WordPress</li>
<li>typecho；zblog</li>
<li>ghost</li>
<li>hexo；hugo</li>
<li>halo</li>
<li>solo</li>
<li><strong>gridea</strong>(推荐)</li>
</ul>
<h2 id="wordpress">WordPress</h2>
<h3 id="搭建">搭建</h3>
<ul>
<li>lnmp环境（建议宝塔面板）<a href="https://bt.cn">宝塔</a></li>
<li>(或)小内存搭建wp站（见附链接）</li>
<li>wordpress官网 <a href="https://www.wordpress.com">wordpress</a></li>
</ul>
<h3 id="主题站点">主题站点</h3>
<blockquote>
<p>wp主题站：https://themeforwp.net/<br>
主题猫：http://ztmao.com/<br>
Wordpress主题站：http://www.thefox.cn/<br>
。。。</p>
</blockquote>
<h4 id="主题推荐">主题推荐</h4>
<ul>
<li><a href="https://github.com/galnetwen/H-Siren">H-Siren</a>，老哥一直还在更新，很多东西就是有点卡适合喜欢花里胡哨的同学。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-debb9a93.png" alt="Screenshot1.png"></li>
<li><a href="https://www.fczbl.vip/787.html">犬blog</a>，以前用过一段时间，还不错，后面感觉太冷清了，弃用了。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-acf3664a.png" alt="Screenshot1.png"></li>
</ul>
<h3 id="优缺点">优缺点</h3>
<ul>
<li>优：<br>
历史悠久，使用的人很多，主题体系，插件体系完善，基本有问题就能解决</li>
<li>劣：<br>
结构冗长，lnmp环境占空间大，响应速度慢，不够小巧美观。</li>
</ul>
<h2 id="typecho">typecho</h2>
<h3 id="搭建-2">搭建</h3>
<ul>
<li>lnmp环境</li>
<li>（或）<a href="https://www.moerats.com/archives/651/">利用caddy加sqlite3搭建小博客</a></li>
<li>官网 <a href="http://typecho.org/">typecho</a></li>
</ul>
<h3 id="主题">主题</h3>
<p>typecho的主题相比较WP的主题要更加漂亮简洁。</p>
<ul>
<li><a href="https://typecho.me/">typecho主题模板站</a></li>
<li><a href="https://typecho.me/">typecho wiki</a></li>
<li><a href="https://typecho.top/">typecho主题商店</a></li>
</ul>
<h4 id="主题推荐-2">主题推荐</h4>
<ul>
<li><a href="https://www.ihewro.com/archives/489/">handsome</a> （收费）很多人都在用，功能很多，作者更新也勤快。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-8caed178.png" alt="Screenshot.png"></li>
<li><a href="https://www.96sir.com/archives/134.html">destiny</a> （收费）非常漂亮的主题，价格稍贵，但是对手机端适配的非常漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-1e7adf91.png" alt="Screenshot.png"></li>
<li><a href="https://github.com/AlanDecode/Typecho-Theme-VOID">Void</a> 猴子打印机的产物，作者小熊猫，写了不少的typecho博客主题。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-1afb0417.png" alt="Screenshot.png"></li>
<li><a href="https://qqdie.com/archives/violet-typecho-themes.html">Violet</a>（收费），知名博主，qq死，一直更新typecho的相关文章，造诣颇深。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-81fa5a16.png" alt="Screenshot1.png"></li>
<li><a href="https://qqdie.com/archives/qingyi.html">Typecho - QingYi</a>，仿开源的论坛的一个主题<br>
<img src="https://img.hacpai.com/file/2019/08/1849124129-aa951a35.jpg" alt="1849124129.jpg"></li>
</ul>
<h3 id="优缺点-2">优缺点</h3>
<ul>
<li>优：<br>
简洁美观，主题现在也不少了，插件也挺丰富的。很多人用</li>
<li>劣：<br>
主流安装还是lnmp环境，还是感觉有点冗长，当然docker安也行。</li>
</ul>
<h2 id="hexohugo">hexo；hugo</h2>
<p>hexo和hugo都是静态的博客，但是相比较而言，hugo的生成速度更快一点，但是主题还是hexo多，所以一般还是安装hexo的多点。</p>
<h3 id="搭建-3">搭建</h3>
<ul>
<li>node环境</li>
<li>git或者静态服务器，用于反代，可选</li>
</ul>
<h3 id="主题-2">主题</h3>
<ul>
<li>官方仓库<br>
<a href="https://hexo.io/themes/index.html">hexo.io</a></li>
</ul>
<h3 id="主题推荐-3">主题推荐</h3>
<ul>
<li>
<p><a href="https://github.com/iissnan/hexo-theme-next">Next</a><br>
大名鼎鼎的next，NexT is a high quality elegant <a href="http://hexo.io/">Hexo</a> theme. It is crafted from scratch, with love.<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-555c6aa6.png" alt="Screenshot1.png"></p>
</li>
<li>
<p><a href="https://github.com/honjun/hexo-theme-sakura">Sukara</a><br>
故乡的樱花又开了，👍 ，功能很全，而且确实很巧玲，主题很新，作者更新还很积极。<br>
<img src="https://img.hacpai.com/file/2019/08/k-947e0c3e.jpg" alt="k.jpg"></p>
</li>
<li>
<p><a href="https://github.com/ppoffice/hexo-theme-icarus">ICARUS</a><br>
A simple, delicate, and modern theme for the static site generator Hexo<br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31-7603e843.png" alt="68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31.png"></p>
</li>
<li>
<p><a href="https://github.com/imzeuk/hugo-theme-zozo">ZOZO</a>，这个主题是真的简洁又漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/showcase-e91a7170.png" alt="showcase.png"></p>
</li>
<li>
<p><a href="https://github.com/SumiMakito/hexo-theme-typography">typography</a><br>
像报纸一样的阅读体验<br>
<img src="https://img.hacpai.com/file/2019/08/head-24dd838f.png" alt="head.png"></p>
</li>
<li>
<p><a href="https://github.com/smackgg/hexo-theme-smackdown">hexo-theme-smackdown</a><br>
一个比较浮夸的hexo主题，虽然说有一点脱离了简约<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-fedc09b9.png" alt="Screenshot1.png"></p>
</li>
<li>
<p><a href="https://github.com/klugjo/hexo-theme-alpha-dust">hexo-theme-alpha-dust</a><br>
This theme was developed from scratch by myself just for fun. It is a glowy futuristic theme, hope you will find a use for it :)<br>
<img src="https://img.hacpai.com/file/2019/08/687474703a2f2f7777772e636f6465626c6f63712e636f6d2f696d672f6865786f2d7468656d652d7468756d626e61696c2f416c706861447573742e6a7067-c879598c.jpg" alt="687474703a2f2f7777772e636f6465626c6f63712e636f6d2f696d672f6865786f2d7468656d652d7468756d626e61696c2f416c706861447573742e6a7067.jpg"></p>
</li>
<li>
<p><a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a><br>
A responsive, clean and simple <a href="http://hexo.io/">Hexo</a> theme for a personal website.<br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f646f63732e676f6f676c652e636f6d2f75633f69643d314b36366263637772347a3954674a657630417a437162493742787a5672376d64-042d29ae.png" alt="68747470733a2f2f646f63732e676f6f676c652e636f6d2f75633f69643d314b36366263637772347a3954674a657630417a437162493742787a5672376d64.png"></p>
</li>
</ul>
<blockquote>
<p>推荐了很多的主题，虽说有点乱吧，但还是大多数我都有自己用过，感觉还是不错的。</p>
</blockquote>
<h3 id="优缺点-3">优缺点</h3>
<ul>
<li>优：<br>
简洁，是静态页面，所以访问速度还是挺快的，而且主题很多，而且布置起来的话，也很简洁，一般其他的博客都会适配hexo的md文件，所以迁移博客也比较简单。</li>
<li>劣：<br>
配置繁琐，主题的配置，根目录的配置都比较繁琐，而且每次的静态页面的生成也挺废时间的。</li>
</ul>
<h2 id="solo博客和halo博客">solo博客和halo博客</h2>
<p>这两种比较像，搭建起来都很容易，一起说了.</p>
<ul>
<li>solo 博客<br>
<a href="https://github.com/b3log/solo">Solo</a> 是一款小而美的开源博客系统，专为程序员设计。</li>
</ul>
<p>Solo 有着非常活跃的<a href="https://hacpai.com/">社区</a>，可将文章作为帖子推送到社区，来自社区的回帖将作为博客评论进行联动。</p>
<blockquote>
<p>这是一种全新的网络社区体验，让热爱记录和分享的你不再感到孤单！<br>
具体细节请浏览 <a href="https://hacpai.com/article/1546941897596">B3log 构思</a></p>
</blockquote>
<ul>
<li>halo 博客<br>
<strong>Halo</strong> [ˈheɪloʊ]，意为光环。当然，你也可以当成拼音读(哈喽)。</li>
</ul>
<p>轻快，简洁，功能强大，使用 Java 开发的博客系统。</p>
<h3 id="搭建-4">搭建</h3>
<ul>
<li>docker ， docker-compose</li>
<li>Java包</li>
<li>war包 ，Tomact</li>
</ul>
<h3 id="主题-3">主题</h3>
<ul>
<li>solo主题：solo的主题是本体里面内置的，换起来很方便。也够用。<br>
<img src="https://img.hacpai.com/file/2019/08/61179517afd61b00a63611e987d5ddea6d6a0fc9-0d368d02.png" alt="61179517afd61b00a63611e987d5ddea6d6a0fc9.png"></li>
<li>halo主题：<br>
不同于solo的内置，只要在主题仓库复制相应的链接，博客就可以自行下载安装。<br>
<a href="https://halo.run/theme/">主题仓库</a><br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30352f30382f356364326663623231666337362e706e67-00f618af.png" alt="68747470733a2f2f692e6c6f6c692e6e65742f323031392f30352f30382f356364326663623231666337362e706e67.png"></li>
</ul>
<h3 id="主题推荐-4">主题推荐</h3>
<ul>
<li>solo ：<br>
Bubble : 气泡，自带live2D，自带特效。<br>
<img src="https://img.hacpai.com/file/2019/08/Bubble-c1e22a77.jpg" alt="Bubble.jpg"></li>
<li>Casper : 简洁material风，文章的特征图很漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/Casper-cbcaca66.jpg" alt="Casper.jpg"></li>
</ul>
<h3 id="优缺点-4">优缺点</h3>
<ul>
<li>优<br>
首先说下有点吧，这个solo和halo博客都是完成度很高的博客，不管是在书写体验，还是前端页面上面，界面简洁漂亮，而且各有各的特点，solo的博客的图床很有特点，因为solo博客是基于黑客派这么一个社区的应用，所以作者内置了一个图床，省去了找图床的麻烦，halo博客的书写体验更棒，是基于gridea的解释器<strong>markdown</strong>工具，书写体验不亚用ios里面webn书写工具啥的，比typra感觉也更好。当然两款博客都是支持都出导入hexo的文件的。</li>
<li>劣<br>
halo博客暂时没有什么不适应的地方，要是硬说的话，主题还是太少了，而且漂亮的主题也是收费的，但是作者还在努力完善。<br>
solo博客的话，其实书写体验还是不够好，建议在<strong>markdown</strong>书写的时候可以代码高亮语句，这样层次分明更好一点。还有就是Java博客嘛，占用内存都不会小的，一般1G以上，不够的话考虑可以用虚拟内存。</li>
</ul>
<h2 id="gridea推荐"><strong>gridea</strong>（推荐）</h2>
<p>✍️一个静态博客写作客户端 (A static blog writing client)<br>
<a href="https://gridea.dev/">GRIDEA</a>是海岛心hey大佬设计的本地<strong>markdown</strong>书写工具，但是可以同步本地的文章到github或者coding，其原理和hexo，hugo是一样的，都是本地生成静态的文件然后上传支持静态资源的服务器，但是平心而论，gridea是比hexo更棒的，虽然主题数目上确实远没有hexo多，但gridea的本质上是<strong>markdown</strong>书写工具啊，在书写体验上可以说是做到了完美，而不亚于hexo主题的高完成度和美观度，这种在不是主要功能却做得如此棒的特质，确实是很难得的。</p>
<h3 id="安装">安装</h3>
<ul>
<li>下载安装包<br>
<a href="https://gridea.dev">官网</a>，下载对应安装包安装即可，全平台支持。</li>
</ul>
<h3 id="主题-4">主题</h3>
<p><a href="https://gridea.dev/themes/">主题仓库</a><br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-6b4f86b9.png" alt="Screenshot1.png"></p>
<blockquote>
<p>个人推荐的是gridea的主题Walker，只要6RMB，还是可以接受的，而且却是漂亮的。</p>
</blockquote>
<h3 id="优缺点-5">优缺点</h3>
<ul>
<li>优：<br>
在一款好用的书写工具的同时，兼顾了博客生成器的功能，对数学公式的支持很棒。</li>
<li>劣：<br>
暂时不能自动同步github和coding以外的容器，并且迁移博客是需要手动本分相应的配置源文件夹的。</li>
</ul>
<h2 id="免费的博客资源">免费的博客资源</h2>
<ul>
<li>微博</li>
<li>微软的Blogger : <a href="https://www.blogger.com/">https://www.blogger.com</a></li>
<li>carrd.co : <a href="https://carrd.co/">https://carrd.co/</a></li>
</ul>
<h2 id="附链接">附链接</h2>
<ul>
<li><a href="https://www.moerats.com/archives/651/">小内存VPS安装Caddy+PHP 7+Sqlite 3环境，并快速搭建Typecho博客</a></li>
<li><a href="https://www.moerats.com/archives/749/">小内存VPS一键安装Typecho/WordPress/Zblog/Kodexplorer及整站备份等</a></li>
<li><a href="https://www.moerats.com/archives/689/">Caddy环境下一些Web应用程序的配置参考</a></li>
<li><a href="https://www.moerats.com/archives/656/">Caddy环境下WordPress博客伪静态设置</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[solo博客搭建配置SSl]]></title>
        <id>https://g.yzddhr.me/post/solo-bo-ke-da-jian-pei-zhi-ssl</id>
        <link href="https://g.yzddhr.me/post/solo-bo-ke-da-jian-pei-zhi-ssl">
        </link>
        <updated>2019-08-03T11:41:18.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>solo博客&quot;专为程序员设计的博客&quot;<br>
<a href="https://github.com/b3log/solo">GitHub</a></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>solo博客&quot;专为程序员设计的博客&quot;<br>
<a href="https://github.com/b3log/solo">GitHub</a></p>
</blockquote>
<!-- more -->
<blockquote></blockquote>
<p>本文利用docker以及docker-compose搭建solo博客并配置SSL.</p>
<h2 id="solo效果图">solo效果图:</h2>
<p><img src="https://g.yzddhr.me/post-images/1564833531441.PNG" alt=""></p>
<h2 id="环境">环境</h2>
<h3 id="安装docker">安装docker</h3>
<pre><code>curl -sSL https://get.docker.com/ | sh 
systemctl start docker 
systemctl enable docker
</code></pre>
<h3 id="安装docker-compose">安装docker-compose</h3>
<ul>
<li>利用pip安装:<br>
<code>pip install docker-compose</code></li>
<li>利用静态文件安装</li>
</ul>
<pre><code>curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<h2 id="编辑docker-compose文件">编辑docker-compose文件</h2>
<p>编辑文件:<br>
<code>vi docker-compose.yml</code><br>
写入:</p>
<pre><code>version: &quot;2&quot;                                                                                                              
                                                                                                                         
services:                                                                                                                 
 mysql:                                                                                                                  
   container_name: mysql                                                                                                 
   image: mysql:5.5.60                                                                                                   
   restart: always                                                                                                       
   volumes:                                                                                                              
     - ./mysql/data:/var/lib/mysql                                                                                       
     - ./mysql/conf/mysqld.conf:/etc/mysql/mysql.conf.d/mysqld.cnf                                                       
   ports:                                                                                                                
     - &quot;6603:3306&quot;                                                                                                       
   environment:                                                                                                          
     - MYSQL_ROOT_PASSWORD=数据库密码                                                                                     
 solo:                                                                                                                   
   container_name: solo                                                                                                  
   image: b3log/solo                                                                                                     
   restart: always                                                                                                       
   ports:                                                                                                                
     - &quot;8080:8080&quot;                                                                                                       
   environment:                                                                                                          
     RUNTIME_DB: &quot;MYSQL&quot;                                                                                                 
     JDBC_USERNAME: &quot;root&quot;                                                                                               
     JDBC_PASSWORD: &quot;数据库密码&quot;                                                                                          
     JDBC_DRIVER: &quot;com.mysql.jdbc.Driver&quot;                                                                                
     JDBC_URL: &quot;jdbc:mysql://mysql:3306/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&quot;     
   command: --listen_port=8080 --server_scheme=http --server_host=域名或IP 
</code></pre>
<p>启动容器:<br>
<code>docker-compose up -d</code><br>
在<code>docker-compose.yml</code>的文件夹下会生成MySQL的文件夹;进入文件夹:配置数据库;依次输入以下命令:<br>
<code>docker exec -it database bash</code><br>
<code>mysql -uroot -p</code>输入密码登入mysql<br>
依次执行</p>
<pre><code>CREATE DATABASE `solo` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER 'solouser'@'%' identified BY 'solo@pwd';
GRANT ALL ON solo.* TO 'solouser'@'%'; 
FLUSH PRIVILEGES;
</code></pre>
<p>重新<code>docker-compose up -d</code>.</p>
<h2 id="配置solo的ssl">配置solo的SSL</h2>
<p>因为用nginx容器反代需要主域名,用二级域名反代会发生错误:当然有主域名,也想用主域名的可以参照<a href="https://github.com/liumapp/solo-in-docker/">docker-in-solo</a>配置https<br>
以下使用cloudflare生成SSL</p>
<ul>
<li>修改<code>docker-compose.yml</code>文件中的<code>solo</code>容器的端口为哦<code>80</code></li>
<li>修改<code>solo</code>容器的<code>sever_host</code>参数为域名;修改<code>server_scheme</code>参数为<code>https</code></li>
<li>cloudflare开启<code>强制SSL</code>,开启<code>小黄云</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费申请AWS的Educate Starter教育版账号]]></title>
        <id>https://g.yzddhr.me/post/mian-fei-shen-qing-aws-de-educate-starter-jiao-yu-ban-zhang-hao</id>
        <link href="https://g.yzddhr.me/post/mian-fei-shen-qing-aws-de-educate-starter-jiao-yu-ban-zhang-hao">
        </link>
        <updated>2019-08-03T07:32:33.000Z</updated>
        <summary type="html"><![CDATA[<p>申请免费的AWS云服务器（不需要信用卡),</p>
]]></summary>
        <content type="html"><![CDATA[<p>申请免费的AWS云服务器（不需要信用卡),</p>
<!-- more -->
<p>AWS还是一如既往的财大气粗,想当年某宝买的8元的虚拟信用卡撸了AWS一年的云服务器,后来还是流量超了15G才没用的.现在水篇Educate Starter的 申请教程.</p>
<h2 id="条件">条件</h2>
<ul>
<li>学生邮箱(EDU邮箱)</li>
</ul>
<h2 id="申请">申请</h2>
<p>其实关于EDU邮箱的获取有很多方法,但是其实每个学校都有自己的EDU邮箱,不过很多人不用就是了.可自行Google申请.</p>
<ol>
<li>进入AWS官网</li>
</ol>
<p>地址:</p>
<blockquote>
<p>https://aws.amazon.com/tw/education/awseducate/</p>
</blockquote>
<p>申请页面，有关于详细的AWS Educate的计划，有兴趣的可以看一看，如果和我一样比较浮躁的话，直接点击”加入AWS Educate”即可开始申请了。</p>
<p>在申请过程中，需要主要的是一定要选在校学生本科那个选项，至于邮箱那一栏请填写你的edu邮箱。之后你会收到一封验证邮箱的邮件，点击链接验证即可。之后需要等待Amazon进行审核。<br>
<img src="https://g.yzddhr.me/post-images/1564817956766.jpg" alt=""></p>
<ol start="2">
<li>
<p>审核完毕<br>
审核完毕后会发个连接过来设置密码<br>
<img src="https://g.yzddhr.me/post-images/1564817980744.PNG" alt=""><br>
<img src="https://g.yzddhr.me/post-images/1564818048104.jpg" alt=""><br>
可以看见，账户上有75美元，美元的有效期限为365天！！！点击黄色的Button进入你的控制台吧！！！<br>
注意在进入控制台的时候会有选择你要登入的账户,有账户的话直接选上面的&quot;已经有AWS的账户&quot;,这边我没有账户,(因为注册AWS要绑定信用卡啊),选下面的&quot;用Educate Starter账户&quot;<br>
<img src="https://g.yzddhr.me/post-images/1564818272029.PNG" alt=""></p>
</li>
<li>
<p>使用</p>
</li>
</ol>
<p>后面就是创建虚机的过程了,以前应该是有75刀的,不知道现在是什么情况,就30刀了,但是注意,这个是你的信用额度,是指在免费的套餐之外的,超额部分收费可以抵扣的额度,而AWS的机子,只要注意每月上行下行的各15G流量限制就行了,一般不会用超的.<br>
<img src="https://g.yzddhr.me/post-images/1564818486856.PNG" alt=""></p>
<ul>
<li>进入控制台<br>
<img src="https://g.yzddhr.me/post-images/1564818651310.PNG" alt=""></li>
<li>熟悉的创建界面<br>
<img src="https://g.yzddhr.me/post-images/1564818674973.PNG" alt=""></li>
</ul>
<blockquote>
<p>后续的化直接用putty什么xshell什么ssh连上就能用了</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github pages开启ssl+CDN]]></title>
        <id>https://g.yzddhr.me/post/github-pages-kai-qi-sslcdn</id>
        <link href="https://g.yzddhr.me/post/github-pages-kai-qi-sslcdn">
        </link>
        <updated>2019-08-02T08:28:56.000Z</updated>
        <summary type="html"><![CDATA[<p>用github能做很多事，</p>
]]></summary>
        <content type="html"><![CDATA[<p>用github能做很多事，</p>
<!-- more -->
<p>除了各种代码托管，现在github越来越大气，开放了个人私有仓库无限开，而且能用来搭建hexo博客之类的，配合jsdeliver的话，github仓库本身就能当CDN用。</p>
<h2 id="条件需求">条件需求</h2>
<ul>
<li>github账户 <a href="http://github.com">GitHub</a></li>
<li>cloudflare账户 <a href="http://cloudflare.com">cloudflare</a></li>
</ul>
<h2 id="搭建github-pages">搭建GitHub pages</h2>
<p>搭建GitHub的博客主要有三种方式</p>
<ul>
<li>hexo , hugo 等静态博客</li>
<li>利用GitHub gist api搭建动态博客 <a href="https://github.com/GitHub-Laziji/vblog">地址</a></li>
<li>借助grides搭建静态的html博客 <a href="https://github.com/getgridea/gridea">地址</a></li>
</ul>
<h2 id="配置caname">配置CANAME</h2>
<ul>
<li>配置的自定义域名不能开启<code>ssl</code>,会和后面的cloudflare冲突,报错.</li>
<li>cloudflare的设置必须在GitHub的自定义域名生效之后才能操作.</li>
</ul>
<h2 id="配置cloudflare">配置cloudflare</h2>
<ul>
<li><code>DNS</code>接入cloudflare</li>
<li>设置小黄云</li>
<li>开启强制<code>SSL</code></li>
</ul>
<h2 id="效果">效果</h2>
<p><img src="https://g.yzddhr.me/post-images/1564735240178.PNG" alt=""><br>
显示是cloudflare的证书,说明配置成功.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gossa和mpv的结合用法]]></title>
        <id>https://g.yzddhr.me/post/gossa-he-mpv-de-jie-he-yong-fa</id>
        <link href="https://g.yzddhr.me/post/gossa-he-mpv-de-jie-he-yong-fa">
        </link>
        <updated>2019-08-01T10:21:10.000Z</updated>
        <summary type="html"><![CDATA[<p>实现的目标：</p>
<blockquote>
<p>实现用本地用mpv播放器播放vps的文件,本来也是非常简单的东西,代替ftp用下而已,不然每次用ftp还是有其不好用的地方.</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>实现的目标：</p>
<blockquote>
<p>实现用本地用mpv播放器播放vps的文件,本来也是非常简单的东西,代替ftp用下而已,不然每次用ftp还是有其不好用的地方.</p>
</blockquote>
<!-- more -->
<h2 id="安装gossa">安装gossa</h2>
<p>项目地址 : <a href="https://github.com/pldubouilh/gossa">GOSSA</a><br>
登陆<code>ssh</code><br>
使用命令:</p>
<pre><code class="language-shell">wget https://github.com/pldubouilh/gossa/releases/download/v0.0.7/gossa-linux64
mv gossa-linux64 /usr/local/bin/gossa
#授权
chmod +x /usr/local/bin/gossa
</code></pre>
<p>启动程序:</p>
<pre><code>gossa /root/moerats
</code></pre>
<p>默认端口是<code>8001</code>,不要忘了后台打开8001端口,并且这个是在本地启动的.其他大方访问使用:</p>
<pre><code>gossa -h 0.0.0.0 /root/moerats
#后台运行
nohup gossa -h 0.0.0.0 /root/moerats &amp;
</code></pre>
<h2 id="安装mpv">安装mpv</h2>
<p>下载mpv编译好的文件:<br>
<a href="https://mpv.io/installation/">MPV官网</a><br>
下载好后是个7z文件夹,解压后添加到环境变量:<code>此电脑右键属性 --&gt; 环境变量 --&gt; 添加path变量</code>自行设置.</p>
<h2 id="使用">使用</h2>
<p>用上下键使用,右击获得文件的链接,直接<code>mpv URL</code>即可.</p>
<h2 id="补充">补充</h2>
<blockquote>
<p>待完成</p>
</blockquote>
<ul>
<li>mpv的用法</li>
<li>mpv的进阶用法</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[goproxy的heroku应用]]></title>
        <id>https://g.yzddhr.me/post/goproxy-de-heroku-ying-yong</id>
        <link href="https://g.yzddhr.me/post/goproxy-de-heroku-ying-yong">
        </link>
        <updated>2019-08-01T07:27:07.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="gorpxoy-heroku">gorpxoy-heroku</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="gorpxoy-heroku">gorpxoy-heroku</h2>
<!-- more -->
<p>Heroku 是一个支持多种编程语言的云平台即服务，gorpxoy-heroku 则是可部署在 Heroku 平台的 gorpxoy 服务。gorpxoy-heroku 使用的 WebSocket 代替原本的 sockets 作为底层传输。</p>
<p>下面的部署方法，前提是你已经拥有一个heroku账号。</p>
<p>1.注册 Heroku 帐号</p>
<p>Heroku 提供免费账号，部分介绍如下：</p>
<p>512 MB RAM per dyno</p>
<p>Free apps sleep automatically after 30 mins of inactivity to conserve your dyno hours</p>
<p>Free apps wake automatically when a web request is received</p>
<p>https://devcenter.heroku.com/articles/limits</p>
<p>https://devcenter.heroku.com/articles/free-dyno-hours#usage</p>
<p>注册地址：https://signup.heroku.com/ （注册和部署过程可能需要梯子）</p>
<h2 id="部署方法一简单">部署方法一（简单）</h2>
<p>本方法为快速部署。</p>
<p>一、在heroku上的部署</p>
<p>1、登陆https://dashboard.heroku.com/login</p>
<p>2、登陆好后，在浏览器地址栏输入https://heroku.com/deploy?template=https://github.com/snail007/goproxy-heroku</p>
<p>3、执行以下三个步骤，见下图：</p>
<p>（1）输入App name.例如<code>test1-goproxy</code></p>
<p>（2）Choose a region:选择一个.例如United States</p>
<p>（3）点击：Deploy app</p>
<p><img src="https://img.hacpai.com/file/2019/07/1-2c554f69.png" alt="1.png"></p>
<p>4、执行完成以后，这是就完成了部署。</p>
<p><img src="https://img.hacpai.com/file/2019/07/2-81397b50.png" alt="2.png"></p>
<p>二、在客户端上执行</p>
<p>独立goproxy客户端：</p>
<p><code>proxy.exe http -t tcp -p :6600 -T wss -P test1-goproxy.herokuapp.com:443 --parent-ws-password pass -q 8.8.8.8:53 --timeout 30000</code></p>
<p>在浏览器上设置代理：127.0.0.1:6600   http</p>
<p>安卓客户端：</p>
<p>安卓 <a href="https://github.com/snail007/goproxy-ss-plugin-android">goproxy-ss-plugin</a> 插件配置可以写：</p>
<pre><code class="language-text">主机：test1-goproxy.herokuapp.com

端口：443

加密方法：aes-256-cfb

密码：123

插件参数：
</code></pre>
<p><code>-S http -j 123 -h aes-256-cfb -T wss -P test1-goproxy.herokuapp.com:443 --parent-ws-password pass --timeout 30000</code></p>
<p>注意：本次部署中需要调整的就是<code>test1-goproxy</code>改为你自己的名称。</p>
<h2 id="部署方法二">部署方法二</h2>
<p>该方法相对方法一步骤多一些，但是可以自己设置加密密码，修改启动参数。</p>
<p>本方法是fork项目后，可以修改相关的参数，再在heroku上部署。</p>
<p>一、在github上fork该项目并修改相关参数</p>
<p>（1）fork项目：https://github.com/snail007/goproxy-heroku</p>
<p>（2）修改配置参数，具体就是修改bootstrap里的内容，点击该文件</p>
<p><img src="https://img.hacpai.com/file/2019/07/3-2efbc373.png" alt="3.png"></p>
<p>修改第7行内容，详细参考：https://snail007.github.io/goproxy/posts/http_cdn_ws/</p>
<p>二、在heroku上部署</p>
<p>1、登陆https://dashboard.heroku.com/apps</p>
<p>2、选择New -&gt; Create new app</p>
<p><img src="https://img.hacpai.com/file/2019/07/4-75a2c03c.png" alt="4.png"></p>
<p>3、执行以下三个步骤，见下图：</p>
<p>（1）输入App name.例如<code>test2-goproxy</code></p>
<p>（2）Choose a region:选择一个.例如United States</p>
<p>（3）点击：Create app</p>
<p><img src="https://img.hacpai.com/file/2019/07/5-2ac7329b.png" alt="5.png"></p>
<p>选择Deploy-&gt;GitHub Connect to github</p>
<p><img src="https://img.hacpai.com/file/2019/07/6-196147dd.png" alt="6.png"></p>
<p>4、连接到自己的github，搜索goproxy-heroku项目，点击连接Connect</p>
<p><img src="https://img.hacpai.com/file/2019/07/7-cce694f3.png" alt="7.png"></p>
<p>5、手动部署Manual deploy -&gt; Deploy Branch， 部署成功。</p>
<p><img src="https://img.hacpai.com/file/2019/07/8-e2c8808a.png" alt="8.png"><br>
<br><br>
<img src="https://img.hacpai.com/file/2019/07/9-35c0a850.png" alt="9.png"></p>
<p>三、在客户端上执行（默认不修改代码）</p>
<p>独立goproxy客户端：</p>
<p><code>proxy.exe http -t tcp -p :6600 -T wss -P test2-goproxy.herokuapp.com:443 --parent-ws-password pass -q 8.8.8.8:53 --timeout 30000</code></p>
<p>在浏览器上设置代理：127.0.0.1:6600   http</p>
<p>安卓客户端：</p>
<p>安卓 <a href="https://github.com/snail007/goproxy-ss-plugin-android">goproxy-ss-plugin</a> 插件配置可以写：</p>
<pre><code class="language-text">主机：test2-goproxy.herokuapp.com

端口：443

加密方法：aes-256-cfb

密码：123

插件参数：
</code></pre>
<p><code>-S http -j 123 -h aes-256-cfb -T wss -P test2-goproxy.herokuapp.com:443 --parent-ws-password pass --timeout 30000</code></p>
<p>注意：本次部署中需要修改test2-goproxy为你自己的名称。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[heroku搭建Oneindex]]></title>
        <id>https://g.yzddhr.me/post/heroku-da-jian-oneindex</id>
        <link href="https://g.yzddhr.me/post/heroku-da-jian-oneindex">
        </link>
        <updated>2019-08-01T07:23:05.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="利用免费空间安装网盘程序">利用免费空间安装网盘程序</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="利用免费空间安装网盘程序">利用免费空间安装网盘程序</h2>
<!-- more -->
<p>妈耶，搞到现在才知道有免费空间这种东西，早知道还买个屁的vps，虽然一个月6元的百度云也算是便宜中的战斗机了，但是还是没有发挥出该有的效用，毕竟配置就在这里，主要也就搞个博客，说道博客，过几天做一个博客的种类总结和主题总结，不会太详细，主要就是记录下自己用的博客和个人感觉不错的主题，所以不会是一个巨细无漏的大辞典，主要是看过就能上手的，话回免费空间，主要可以用now.sh或者heroku来搭建oneindex</p>
<h2 id="nowsh">now.sh</h2>
<p>oneindex 是将微软的 onedrive 打造成分享网盘的程序。使用 now.sh 提供的 Docker 部署环境免费搭建个人分享网盘。</p>
<h3 id="注册账号">注册账号</h3>
<p>注册 now 账号。注册地址 https://zeit.co/</p>
<p>注册 onedrive 账号。可以申请 5T 容量的网盘更好。（当然可以某宝购买账号，很便宜，但是注意大空间都很低有管理员管理的，所以，就不要再onedriver存什么私密的文件了，而且外国云盘都是这个套路，基本就算管理员没动作，微软也会拿你的文件给人工智能当训练素材的，所以注意下）</p>
<p><strong>待更新</strong></p>
<h2 id="heroku">heroku</h2>
<h3 id="注册heroku账号">注册heroku账号</h3>
<p>注册网址：https://signup.heroku.com/</p>
<p>填写相关的信息，注册即可！</p>
<p>避免使用国内的邮箱，尤其QQ邮箱！需要挂一个代理有一个Google人机验证！<br>
主要还是用美国西南大学的教育edu账号（具体自己Google，edu邮箱还有很多其他的功能）或者用Gmail账号，163，126，QQ都是不能用的。</p>
<h3 id="提前准备">提前准备</h3>
<p>在自己的vps或者Windows的本地PHP环境里面先下载https://github.com/donwa/oneindex的release ，本地解压后先配置好账号信息，注意在配置账号信息的地方可能会出错几次，多试几次就行了，反正本来onedriver额api就容易炸。然后在文件夹下会生成token.php和base.php两个文件。这两个文件去上传到自己fork的项目里面。<br>
<img src="https://img.hacpai.com/file/2019/07/7-c1a0d34c.PNG" alt="7.PNG"></p>
<h3 id="部署安装">部署安装</h3>
<p>1）使用自己的GITHUB账号，去fork一份大佬的源码！项目地址：https://github.com/donwa/oneindex<br>
，进行第一步的操作。<br>
2）注册完账号，打开【控制面板】，点击右上角的【New】。新建一个APP<br>
<img src="https://img.hacpai.com/file/2019/07/TB1JMmLXtfvK1RjSspoXXbfNpXa640x640-667843ec.jpg" alt="TB1JMmLXtfvK1RjSspoXXbfNpXa640x640.jpg"><br>
3）部署选项我们选择GITHUB，然后点击【Continue】3）部署选项我们选择GITHUB，然后点击【Continue】<br>
<img src="https://img.hacpai.com/file/2019/07/2-575d6dfc.jpg" alt="2.jpg"><br>
4）GITHUB连接成功后，搜索oneindex源码。选择master分支。点击怕【Deploy Branch】就开始部署了！<br>
<img src="https://img.hacpai.com/file/2019/07/3-c83795b7.jpg" alt="3.jpg"><br>
5）等上1分钟，即可部署成功！我们打开部署的APP，点击【Settings】。在此页面可将APP的相关信息。包括可访问的域名！！<br>
<img src="https://img.hacpai.com/file/2019/07/4-12f9e79a.jpg" alt="4.jpg"></p>
<h3 id="其他配置">其他配置</h3>
<p>heroku使用是有限制的，每30分钟没人访问则会掉了，所以设置云监控，每20分钟访问一次。<br>
破解也简单，网上有好多免费的网站监控。随便找一个监控一下就可以了！比如阿里云的云监控！或者什么360监控都可以。<br>
<img src="https://img.hacpai.com/file/2019/07/5-ce818fca.jpg" alt="5.jpg"><br>
<img src="https://img.hacpai.com/file/2019/07/6-af4caadf.jpg" alt="6.jpg"></p>
<h3 id="访问">访问</h3>
<p>如果不出问题的话应该就能访问了。（以上的图片为了方便，使用的是ruyou的图片。）后续的话为了访问的方便，可以弄个CNAME绑定到自己的域名。</p>
<h4 id="更新">更新</h4>
<p>heroku没有信用卡是无法使用自定义域名的。<br>
如果绑定了信用卡后使用命令<br>
<code>heroku domains:add one.yzddhr.me -a yzd1-onedriver</code>来绑定。当然前提安装heroku的cil<br>
使用命令：<br>
<code>heroku login -i</code>登陆<br>
64位命令行客户端下载：<a href="https://cli-assets.heroku.com/heroku-x64.exe">heroku</a></p>
<h2 id="使用体验">使用体验</h2>
<p>说个改良体验的方法，因为是老式的onedriver上传文件是很不方便的，可以下载一个命令行程序来辅助上传笔记每次用网页上传真的烦。<a href="https://github.com/cnbeining/onedrivecmd">onedrivecmd</a><br>
不过我是真的佛了，都是在国外的服务器，你就不要想速度能有多快了，很慢，放视频的话还要挂代理，很鸡肋吧，本来onedriver就是这种东西，当服务器的挂载空间都嫌传的慢，不过可能是因为我用额是百度云的服务器，国外的服务器可能会好点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[喜欢的音乐(最近循环)]]></title>
        <id>https://g.yzddhr.me/post/xi-huan-de-yin-le-zui-jin-xun-huan</id>
        <link href="https://g.yzddhr.me/post/xi-huan-de-yin-le-zui-jin-xun-huan">
        </link>
        <updated>2019-08-01T01:17:19.000Z</updated>
        <summary type="html"><![CDATA[<p>这个页面主要是自己喜欢的几首歌,而且一直单曲循环的,虽然也没人看就是了.</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个页面主要是自己喜欢的几首歌,而且一直单曲循环的,虽然也没人看就是了.</p>
<!--more-->
<h2 id="tokyo-luna-shadows">Tokyo --- luna shadows</h2>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=504264941&auto=0&height=66"></iframe>
<h2 id="i-wish-tom-macdonald">I wish --- Tom Macdonald</h2>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1352544870&auto=1&height=66"></iframe>
<h2 id="gasoline-halsey">Gasoline --- Halsey</h2>
<p><a href="http://m10.music.126.net/20190801100651/7b9a2ad870c7643e076cbfbb5deb3622/ymusic/a76b/7992/b7a0/1692d8d1a69988f9b14dd0236ac46f37.mp3">MP3</a></p>
<h2 id="everything-will-flow-suede">Everything Will Flow - Suede</h2>
<p><a href="http://m10.music.126.net/20190801101223/1474fc66aac6e1c38fecdd23f54151fa/ymusic/8d84/9f46/f67d/fc3b155313385b6dc391f4fac97a629f.mp3">MP3</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[经济问题中的导数的应用]]></title>
        <id>https://g.yzddhr.me/post/jing-ji-wen-ti-zhong-de-dao-shu-de-ying-yong</id>
        <link href="https://g.yzddhr.me/post/jing-ji-wen-ti-zhong-de-dao-shu-de-ying-yong">
        </link>
        <updated>2019-08-01T01:01:20.000Z</updated>
        <summary type="html"><![CDATA[<p>数学3的笔记简洁版</p>
]]></summary>
        <content type="html"><![CDATA[<p>数学3的笔记简洁版</p>
<!--more-->
<h2 id="概念">概念</h2>
<h3 id="弹性">弹性</h3>
<p>(自变量)/(因变量) * 因变量对自变量的求导<br>
考虑实际上意义添加正负号 &gt;0 添加负号<br>
本质上解微分方程 物以类聚<br>
第N个初处的经济意义是从N+1处开始的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于github的ssl配置]]></title>
        <id>https://g.yzddhr.me/post/guan-yu-github-de-ssl-pei-zhi</id>
        <link href="https://g.yzddhr.me/post/guan-yu-github-de-ssl-pei-zhi">
        </link>
        <updated>2019-08-01T00:13:16.000Z</updated>
        <summary type="html"><![CDATA[<p>github的相关的SSL配置以及一些错误</p>
]]></summary>
        <content type="html"><![CDATA[<p>github的相关的SSL配置以及一些错误</p>
<!--more-->
<h2 id="添加cname">添加CNAME</h2>
<p>这个不用多说了搭建都知道，就是在下面新建一个CNAME文件，写入域名即可，现在github是支持自定义域名的ssl的，</p>
<h2 id="错误分析">错误分析</h2>
<ol>
<li>百度云的报错，一开始用了cloudflare的CDN，一晚上过后，发现在配置gitalk的时候重定向域名是会报错的，所以先关掉CNAME，然后发现域名被阻断，还是什么百度云的鬼东西，真的佛了，cloudflare是和百度云的中国合作，所以应该是这样吗？</li>
<li>github和cloudflare的问题，cloudflare应该是用了某些很厉害的什么技术吧，但是在用github的时候生成的证书会和cloudflare的证书冲突，所以万般警告，在配置证书什么的时候，配置好了之后再开CDN，<strong>之前一定不要开CDN！</strong></li>
</ol>
<h2 id="github-pages使用体验">github pages使用体验</h2>
<p>用github当博客，不是说不行，但是使用体验就那样吧，首先你的博客啥隐私都别想有了，而且服务器在国外，速度也是堪忧，还是正儿八经的用物理机或者vps的博客吧，不过这个Gridea是真的挺好的，平时记点东西，也不错。话说我应该可以用一个自建的git服务把Gridea部署在自己的vps上哎!</p>
]]></content>
    </entry>
</feed>