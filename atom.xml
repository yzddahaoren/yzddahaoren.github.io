<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://g.yzddhr.me</id>
    <title>yzd-gridea</title>
    <updated>2019-08-14T10:17:19.472Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://g.yzddhr.me"/>
    <link rel="self" href="https://g.yzddhr.me/atom.xml"/>
    <subtitle>记录 :  思考 : 慎言</subtitle>
    <logo>https://g.yzddhr.me/images/avatar.png</logo>
    <icon>https://g.yzddhr.me/favicon.ico</icon>
    <rights>All rights reserved 2019, yzd-gridea</rights>
    <entry>
        <title type="html"><![CDATA[ubuntu口袋系统搭建之桌面版（TLS）]]></title>
        <id>https://g.yzddhr.me/post/ubuntu-kou-dai-xi-tong-da-jian-zhi-zhuo-mian-ban-tls</id>
        <link href="https://g.yzddhr.me/post/ubuntu-kou-dai-xi-tong-da-jian-zhi-zhuo-mian-ban-tls">
        </link>
        <updated>2019-08-14T10:04:35.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>搭建口袋系统，即插即用，最近刚好需要用Linux，为了方便安装一个随身系统，即插即用，方便的使用node和docker等，本文使用Vm workstation搭建</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>搭建口袋系统，即插即用，最近刚好需要用Linux，为了方便安装一个随身系统，即插即用，方便的使用node和docker等，本文使用Vm workstation搭建</p>
<!-- more -->
<blockquote>
<p>网络教程众多，但是大多数含糊其词，请严格按照本文操作。</p>
</blockquote>
<h2 id="环境条件">环境（条件）</h2>
<ul>
<li>Ubuntu14.04镜像（可选，本人是电脑配置跟不上才选的14，当然也可以用18）</li>
<li>VM workstations</li>
<li>一个U盘（这边建议USB3.0，本人用的是USB2.0结果慢的想死）</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="vm-虚机安装">VM 虚机安装</h3>
<p>下载地址:链接: https://pan.baidu.com/s/12Mn69kd1gSni85CKNvA5Fw 提取码: xwyw<br>
下载安装输入安装包里面的密钥即可。</p>
<h3 id="虚拟环境开启">虚拟环境开启</h3>
<p>对于大多数PC来说，默认没有开启虚机环境，需要开启虚拟化技术，才能用VM虚拟机。</p>
<p><strong>1. 检查windows操作系统是否已经打开了Hyper-V功能：</strong></p>
<p>控制面板——&gt;程序——&gt;启用或关闭Windows功能——&gt;勾选Hyper-V<br>
<img src="https://img.hacpai.com/file/2019/08/1-dba475d7.png" alt="1.png"></p>
<p><strong>2. 检查BIOS是否开启了虚拟化功能：</strong></p>
<p>这个的话，不同的主板的bios进入是不一样的，自行百度。<br>
附HP官网说明:https://support.hp.com/cn-zh/document/c05189714</p>
<h3 id="开启-vmware-usb-服务">开启 VMware USB 服务</h3>
<p><img src="https://img.hacpai.com/file/2019/08/ia100000002-98ef37a2.png" alt="ia100000002.png"><br>
启动后如下图<br>
<img src="https://img.hacpai.com/file/2019/08/ia100000003-a3566643.png" alt="ia100000003.png"></p>
<h3 id="新建虚机">新建虚机</h3>
<p><strong>1. 开启软件，新建虚机</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000004-68be674c.png" alt="ia100000004.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000447-dbca37d1.png" alt="ia100000447.png"><br>
<strong>2. 随便一个名字</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000448-de9d58c5.png" alt="ia100000448.png"><br>
<strong>3. 选择储存为单个文件</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000449-809cf9eb.png" alt="ia100000449.png"><br>
<strong>4. 编辑虚拟机</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000451-03030864.png" alt="ia100000451.png"><br>
<strong>5. 双击“处理器”全部勾选</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000453-d3e721b3.png" alt="ia100000453.png"><br>
<strong>6. 双击USB选项。全部勾选</strong><br>
<img src="https://img.hacpai.com/file/2019/08/Snipaste20190814171129-f3446527.png" alt="Snipaste20190814171129.png"><br>
<strong>7. 选择相应镜像文件</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000457-6818939a.png" alt="ia100000457.png"><br>
<strong>8. 播放虚拟机</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000458-982eeeeb.png" alt="ia100000458.png"></p>
<blockquote>
<p>如果无法正常的开启虚拟机的话，说明虚拟化的功能还是没有开启，说明前面还是没有做到位。自行百度。</p>
</blockquote>
<p><strong>9. 选择试用Try Ubuntu</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000459-3e82f4cd.png" alt="ia100000459.png"><br>
<strong>10.连接U盘</strong><br>
<em>这里注意点击一下虚拟机的画面，不然不可使用键鼠</em><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000460-fae2b255.png" alt="ia100000460.png"><br>
<strong>11. 点击安装Ubuntu</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000465-21f23bb7.png" alt="ia100000465.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000466-733f08c1.png" alt="ia100000466.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000467-ec113e42.png" alt="ia100000467.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000468-f3b11d77.png" alt="ia100000468.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000469-f93d2ecf.png" alt="ia100000469.png"></p>
<p><strong>12. 磁盘分区</strong><br>
<em>这里注意双击你自己的U盘或者移动硬盘，我的是用硬盘，自己区分</em><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000470-7022d800.png" alt="ia100000470.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000471-8b005d40.png" alt="ia100000471.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000472-aed1398a.png" alt="ia100000472.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000473-3a8f6400.png" alt="ia100000473.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000475-f0e54c0a.png" alt="ia100000475.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000477-84197c5c.png" alt="ia100000477.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000478-9b66fe2b.png" alt="ia100000478.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000479-7063d714.png" alt="ia100000479.png"></p>
<p><strong>13. 进入漫长的等待过程</strong><br>
<em>这个过程真的非常漫长，这边建议USB2。0最好不要安装，USB2.0推荐后面安装ubutnu server的教程</em><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000480-9b6004d1.png" alt="ia100000480.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000481-8da41772.png" alt="ia100000481.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000482-c3ef74d7.png" alt="ia100000482.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000483-17c316af.png" alt="ia100000483.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000486-86819df6.png" alt="ia100000486.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000487-4045d2bc.png" alt="ia100000487.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000488-14d95be7.png" alt="ia100000488.png"><br>
<strong>14. 安装完成</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000489-45a48858.png" alt="ia100000489.png"><br>
<strong>15. 关闭软件</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000490-19351df5.png" alt="ia100000490.png"><br>
<strong>16. 设置U盘启动</strong><br>
<em>建议自行百度，不同的主板的BIOS设置不同</em><br>
就HP来说；如下操作：</p>
<ol>
<li>开机时按下esc进入BIOS</li>
<li>进入安全选项卡（security）</li>
<li>按F5或者F6调整选项位置（F5向下，F6向上）</li>
<li>F10保存并退出<br>
<strong>即可进入系统</strong><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000492-677d70ed.png" alt="ia100000492.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000493-e2cd5742.png" alt="ia100000493.png"><br>
<img src="https://img.hacpai.com/file/2019/08/ia100000494-f8bf8b2d.png" alt="ia100000494.png"></li>
</ol>
<h3 id="使用体验">使用体验</h3>
<blockquote>
<p>不要用，怪不得没人用这种口袋系统，首先我用的是USB2.0可能也是一个原因，但是说实话，普通U盘还是就不同装了吧，建议老毛桃的win PE还是不错的选择。<br>
这里老毛桃的官网：</p>
</blockquote>
<ol>
<li>http://www.laomaotao.org/<br>
这个网站的话，是官方网站，但是软件会报毒。</li>
<li>https://www.laomaotao.net/<br>
这个网站不会报错，而且这个网站不会报毒，还是绿色版本。推荐。</li>
</ol>
<h3 id="优缺点">优缺点</h3>
<p>**优点:**很显然，毕竟是口袋系统，所以方便性还是有的。<br>
**缺点:**使用速度慢，当然可能是我的缺点（没有USB3.0），和系统无关，但是使用体验还是不甚理想，而且如果要使用无线网的话，还必须设置无线网驱动。</p>
<h2 id="下期">下期</h2>
<p>利用VM 虚拟机安装ubuntu server的口袋系统。（推荐）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费的免备案的CDN]]></title>
        <id>https://g.yzddhr.me/post/mian-fei-de-mian-bei-an-de-cdn</id>
        <link href="https://g.yzddhr.me/post/mian-fei-de-mian-bei-an-de-cdn">
        </link>
        <updated>2019-08-13T00:03:42.000Z</updated>
        <summary type="html"><![CDATA[<p>今天要介绍的是一家免费的CDN，</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天要介绍的是一家免费的CDN，</p>
<!-- more -->
<p>国人的外国公司，首月赠送500G，有邀请赠送1T，但是有办法搞到流量包，当然你要是想每月换个号，没问题，也就重新设置下CNAME的事，但是不同的账号，需要有个7天的等待期，相当于这段时间你网站就只能直连了，但是是可以通过邀请获取永久的流量包的，这也是为什么我水这篇文章，希望好人们可以动动小手，帮帮忙，我博客基本没人访问，所以只要能邀请1个人，我就能获得5个G，就完全够了！帮个忙在走啦，靓仔。<br>
<img src="https://g.yzddhr.me/post-images/1565654957819.jpg" alt=""></p>
<blockquote>
<p>网址：https://console.nodecache.com/api/f?aff=3jWeQE<br>
直接就是上面的了，不敢短连接隐藏邀请码啥的花花道道了。</p>
</blockquote>
<p>注册的过程就不用多说了，填个邮箱，设个密码就完事了，大家只要注册后，使用下CDN就完事了，不用是没有奖励的，就是送的1024G不可一点没用。这样就没有5G流量包了。<br>
<img src="https://g.yzddhr.me/post-images/1565655352234.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自动下载bilibili的视频]]></title>
        <id>https://g.yzddhr.me/post/zi-dong-xia-zai-bilibili-de-shi-pin</id>
        <link href="https://g.yzddhr.me/post/zi-dong-xia-zai-bilibili-de-shi-pin">
        </link>
        <updated>2019-08-07T02:25:52.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="实现功能">实现功能</h2>
<p>vps自动下载手机上b站投币或者收藏的视频。后续可以搭配设置自动同步到onedriver或者google硬盘等。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="实现功能">实现功能</h2>
<p>vps自动下载手机上b站投币或者收藏的视频。后续可以搭配设置自动同步到onedriver或者google硬盘等。</p>
<!-- more -->
<h2 id="环境">环境</h2>
<ul>
<li>docker</li>
<li>web-hook</li>
<li>IFTTT</li>
<li>RSSHUB</li>
<li>you-get</li>
</ul>
<h2 id="安装环境">安装环境</h2>
<p>1.安装docker</p>
<pre><code>curl -sSL https://get.docker.com/ | sh  
systemctl start docker  
systemctl enable docker 
</code></pre>
<p>2.安装nodejs</p>
<pre><code>#Debian/Ubuntu系统  
curl -sL https://deb.nodesource.com/setup_10.x | bash - 
apt install -y nodejs git 

#CentOS系统 
curl -sL https://rpm.nodesource.com/setup_10.x | bash - 
yum install nodejs git -y
</code></pre>
<h2 id="安装软件">安装软件</h2>
<ul>
<li>RSSHUB</li>
</ul>
<pre><code>docker run -d --name rsshub -p 1200:1200 diygod/rsshub
</code></pre>
<ul>
<li>web-hook</li>
</ul>
<pre><code>git clone https://github.com/DIYgod/download-webhook.git //下载web-hook
npm install //模块安装
npm run start &amp; //启动(后台)
</code></pre>
<p>测试</p>
<pre><code>curl -X POST -H &quot;Content-Type:application/json&quot; -d '{&quot;secret&quot;: &quot;mysecret&quot;, &quot;path&quot;: &quot;mypath&quot;, &quot;name&quot;: &quot;myvideo&quot;, &quot;url&quot;: &quot;https://www.bilibili.com/video/av45364988&quot;}' http://127.0.0.1:3000
</code></pre>
<p>绿的就说明没问题，注意跑在3000端口，记得打开</p>
<ul>
<li>you-get<br>
注意需要python3环境</li>
</ul>
<pre><code>pip3 install you-get
</code></pre>
<h2 id="配置">配置</h2>
<p>进入IFTTT官网<a href="https://ifttt.com/">官网</a><br>
新建APP，进行如图配置<br>
<img src="https://img.hacpai.com/file/2019/06/Screenshot-f2761ce1.png" alt="Screenshot.png"></p>
<p><img src="https://img.hacpai.com/file/2019/06/Screensvhot-737250a9.png" alt="Screensvhot.png"></p>
<p>成功如图<br>
<img src="https://img.hacpai.com/file/2019/06/Screshot-7649bd5c.png" alt="Screshot.png"></p>
<h2 id="更多配置">更多配置</h2>
<p><code>RSSHUB</code>更详细的用法参照官网：<a href="https://docs.rsshub.app/">https://docs.rsshub.app/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSl子系统使用指南]]></title>
        <id>https://g.yzddhr.me/post/wsl-zi-xi-tong-shi-yong-zhi-nan</id>
        <link href="https://g.yzddhr.me/post/wsl-zi-xi-tong-shi-yong-zhi-nan">
        </link>
        <updated>2019-08-07T02:23:04.000Z</updated>
        <summary type="html"><![CDATA[<p>以下是已经开启虚拟化之后的操作，包括WSL的一些管理和走过的坑，关于更基础的后面再补吧。</p>
]]></summary>
        <content type="html"><![CDATA[<p>以下是已经开启虚拟化之后的操作，包括WSL的一些管理和走过的坑，关于更基础的后面再补吧。</p>
<!-- more -->
<h2 id="两个管理">两个管理</h2>
<pre><code>- wslconfig
- lxrun
</code></pre>
<p>这两个命令都是本地Windows使用的，具体使用办法自己看说明，都是汉字。<br>
可以用这俩个命令设置默认的<code>wsl</code>命令之后进入的系统。就是自己有多个Linux安装后的情况啦。主要是拿来卸载用的。</p>
<h2 id="文件系统">文件系统</h2>
<p>WSL和Windows主系统之间的文件系统是可以互相访问的。</p>
<p>如果在WSL中访问Windows系统的文件，可在根目录下/mnt/看到对应Windows盘符字母的文件夹，通过这些文件夹即可访问Windows的文件系统。</p>
<p>如果在Windows系统中访问<code>WSL</code>的文件，可在Windows系统中找到已安装Linux发行版的应用数据文件夹，所有Linux系统的数据都在那个文件夹（通过应用商店安装的Linux发行版本质上也是一个应用）。Linux发行版的数据文件夹在<code>C:\Users\{你的用户名}\AppData\Local\Packages\{Linux发行版包名}\LocalState\rootfs</code>路径内，在<code>rootfs</code>文件夹内我们会看到在<code>WSL</code>中的根目录。</p>
<blockquote>
<p><strong>注：在Windows下对WSL文件修改可能会造成权限错误</strong></p>
</blockquote>
<h2 id="端口">端口</h2>
<ul>
<li>Windows本地和子系统是同一个端口，同一个IP，就是localhost。</li>
</ul>
<h2 id="卸载">卸载</h2>
<ol>
<li>通过<code>wslconfig</code>命令来卸载注册。</li>
<li>进入上面说的本地文件夹下，删除相关的发行版的目录即可，也就是说其实什么安装子系统也就是注册了一下而已。<br>
或者：使用</li>
</ol>
<pre><code>lxrun /uninstall /full
</code></pre>
<blockquote>
<p>PS:进入上面说的目录进行删除,丛文件夹的内容即里面开始删,不然会提示权限错误,里面删的只剩几个数据库.db之后,就能整个删除了.从新进入Windows store,点击安装提示错误,用管理员的cmd,用cd命令进入给的目录删除相应的目录即可</p>
</blockquote>
<p><strong>最后在任务栏右击卸载即可。</strong></p>
<h1 id="wsl子系统">WSL子系统</h1>
<p>想了想还是一起写了吧，反正安装也简单的很。</p>
<h2 id="安装">安装</h2>
<p>复制来的</p>
<blockquote>
<p>在安装前，需要在<strong>启动或关闭Windows功能</strong>中勾选<strong>适用于Linux的Windows子系统</strong>，或者直接在管理员权限的PowerShell中输入<code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code>此条命令，也能达到同样的效果。<br>
完成上述操作后，可直接在<strong>Microsoft Store</strong>中搜索Linux，到本文书写为止，商店中已经有Ubuntu、SUSE、Debian、Kali等Linux发行版，个人建议下载Ubuntu。<br>
到Ubuntu的下载页，可以看到发布者为Canonical公司，这也正是Ubuntu的维护公司，值得注意的是，Canonical公司还发布了特定版本的Ubuntu系统，例如Ubuntu 16.04 LTS、Ubuntu 18.04 LTS等，个人建议直接下载无版本号的Ubuntu，而不要下载特定版本的Ubuntu，因为无版本号的Ubuntu会在新版本Ubuntu发布之后切换到最新版，所以它始终指向最新的Ubuntu。同时请注意，应用商店里Ubuntu软件的更新并不会升级Ubuntu版本，如果你恰好安装的是旧版本，想要升级到新版本，可以在WSL中运行<code>do-release-upgrade</code>命令升级到最新版。<br>
下载完成后，要启动Ubuntu有多种方式，可以在<strong>PowerShell</strong>或<strong>cmd</strong>中输入<code>wsl</code>或<code>bash</code>或<code>ubuntu</code>都可启动，也可以直接在<strong>开始菜单</strong>中点击Ubuntu图标启动。</p>
</blockquote>
<h2 id="ssh的配置">ssh的配置</h2>
<p>window自己的bash 难用的要死，肯定还是要ssh外面用的。<br>
因为自己的Windows会占用22端口。而子系统和主机是同端口的。<br>
修改SSH Server的监听端口，这里修改外<code>23</code>。</p>
<p><code>sudo sed -i '/Port /c Port 23' /etc/ssh/sshd_config</code></p>
<p>修改SSH Server的监听地址。</p>
<p><code>sudo sed -i '/ListenAddress 0.0.0.0/c ListenAddress 0.0.0.0' /etc/ssh/sshd_config</code></p>
<p>按照个人需求配置密码登陆或者密钥登陆，在此不做演示</p>
<p>重启SSH服务，本地已经能够通过SSH登陆。</p>
<p><code>sudo service ssh restart</code></p>
<h3 id="更详细配置">更详细配置</h3>
<p>要想在WSL中开启SSH服务，需要在配置文件(/etc/ssh/sshd_config)中作如下修改：</p>
<pre><code>Port 2222  #将22改为2222，因Win10中自带的SSH服务也在监听22端口 

ListenAddress 0.0.0.0  #取消注释，监听所有端口 
UsePrivilegeSeparation no  #将yes修改为no 
PermitRootLogin yes  #将prohibit-password修改为yes，允许root用户登录，视个人情况而定 
PasswordAuthentication yes  #将no修改为yes，允许密码登录
</code></pre>
<h3 id="报错解决">报错解决</h3>
<p><code>service ssh start</code>时报错如下:</p>
<pre><code>Could not load host key: /etc/ssh/ssh_host_rsa_key
Could not load host key: /etc/ssh/ssh_host_dsa_key 
Could not load host key: /etc/ssh/ssh_host_ecdsa_key 
Could not load host key: /etc/ssh/ssh_host_ed25519_key
</code></pre>
<p>问题是没有相关的秘钥<br>
解决:生成相关的秘钥</p>
<pre><code>ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key 
ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key 
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key 
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
</code></pre>
<h3 id="默认启动">默认启动</h3>
<p><code>vi /etc/rc.local</code><br>
加入一行<br>
<code>/etc/init.d/ssh start</code>在<code>exit 0</code>之前。</p>
<h2 id="wsl的子系统如何迁移">WSL的子系统如何迁移</h2>
<p>主流的使用LxRunOffline进行迁移：不过好像也就只迁移到了G盘里面。也不知道有没有什么实质性的用处。</p>
<ul>
<li>
<p>下载 LxRunOffline 软件 链接为：<a href="https://github.com/DDoSolitary/LxRunOffline/releases">https://github.com/DDoSolitary/LxRunOffline/releases</a></p>
</li>
<li>
<p>解压，并在该目录下打开命令提示符，输入如下代码</p>
</li>
</ul>
<pre><code># 显示当前的 Distribution 名称
&gt; LxRunOffline list 
Legacy 
# 移动该 Distribution 
&gt; LxRunOffline move -n Legacy -d D:\wsl\legacy
</code></pre>
<p>上述命令将整个 WSL 的 rootfs 移动至 <code>D:\wsl\legacy</code> 文件夹下。</p>
<ul>
<li>check 能否正常使用，按照使用一节提示的操作进行即可</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内网穿透加shadowsocks实现全局穿透（伪）]]></title>
        <id>https://g.yzddhr.me/post/nei-wang-chuan-tou-jia-shadowsocks-shi-xian-quan-ju-chuan-tou-wei</id>
        <link href="https://g.yzddhr.me/post/nei-wang-chuan-tou-jia-shadowsocks-shi-xian-quan-ju-chuan-tou-wei">
        </link>
        <updated>2019-08-07T02:21:53.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="实现功能">实现功能</h2>
<p>本地内网主机ip，192.168.0.103上有服务80端口的网站一个，利用同局域网的ip，192.168.0.104主机一台内网穿透到一台有公网ip的服务器，实现非局域网主机的任何一台机子可以访问服务。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="实现功能">实现功能</h2>
<p>本地内网主机ip，192.168.0.103上有服务80端口的网站一个，利用同局域网的ip，192.168.0.104主机一台内网穿透到一台有公网ip的服务器，实现非局域网主机的任何一台机子可以访问服务。</p>
<!-- more -->
<h2 id="环境">环境</h2>
<p>说是环境，其实是安装的软件啦</p>
<ul>
<li>goproxy</li>
<li>shadowsocks (GO）版本</li>
<li>公网vps</li>
<li>shdowsocks rocket （可选），IOS的shadowsocks客户端。</li>
</ul>
<h2 id="安装">安装</h2>
<ul>
<li>goproxy</li>
</ul>
<ol>
<li>下载proxy<br>
下载地址 : https://github.com/snail007/goproxy/releases/latest<br>
下面以v7.9为例，如果有最新版，请使用最新版链接，注意替换下面的下载连接里面的版本号为最新版版本号。</li>
</ol>
<pre><code>cd /root/proxy/  
wget https://github.com/snail007/goproxy/releases/download/v7.9/proxy-linux-amd64.tar.gz  
</code></pre>
<ol start="2">
<li>下载自动安装脚本</li>
</ol>
<pre><code>cd /root/proxy/  
wget https://raw.githubusercontent.com/snail007/goproxy/master/install.sh  
chmod +x install.sh  
./install.sh  
</code></pre>
<h3 id="生成通讯文件">生成通讯文件</h3>
<p>http，tcp，udp代理过程会和上级通讯，为了安全我们采用加密通讯，当然可以选择不加密通信通讯，本教程所有和上级通讯都采用加密，需要证书文件。</p>
<p>1.通过下面的命令生成自签名的证书和key文件。<br>
<code>./proxy keygen -C proxy</code><br>
会在当前程序目录下面生成证书文件proxy.crt和key文件proxy.key。</p>
<p>2.通过下面的命令生，使用自签名证书proxy.crt和key文件proxy.key签发新证书:goproxy.crt和goproxy.key。<br>
<code>./proxy keygen -s -C proxy -c goproxy</code><br>
会在当前程序目录下面生成证书文件goproxy.crt和key文件goproxy.key。下载相关证书到本地，放到goproxy.exe文件同一目录。</p>
<p>3.默认情况下证书的里面的域名是随机的，可以使用<code>-n test.com</code>参数指定。</p>
<p>4.更多用法:<code>proxy keygen --help</code>。</p>
<ul>
<li>shadowsocks-go</li>
</ul>
<ol>
<li>下载对应版本: https://github.com/shadowsocks/shadowsocks-go/releases</li>
<li>写一个配置<code>config.json</code></li>
</ol>
<pre><code>{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:7777,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;yzd&quot;,
    &quot;method&quot;: &quot;aes-128-cfb&quot;,
    &quot;timeout&quot;:600
}
</code></pre>
<ol start="3">
<li>运行<code>./shadowsocks-server -c config.json</code></li>
</ol>
<h2 id="使用">使用</h2>
<h3 id="背景">背景</h3>
<ul>
<li>内网机器A提供了shadowsocks端口7777</li>
<li>有VPS一个，公网IP:22.22.22.22</li>
</ul>
<h3 id="需求">需求</h3>
<p>通过访问VPS的28080端口访问到内网机器A的7777端口<br>
步骤：</p>
<ol>
<li>在vps上执行<br>
<code>./proxy bridge -p &quot;:33080&quot; -C proxy.crt -K proxy.key</code><br>
<code>./proxy server -r &quot;:28080@:7777&quot; -P &quot;127.0.0.1:33080&quot; -C proxy.crt -K proxy.key</code></li>
<li>在公司机器A上面执行<br>
<code>./proxy client -P &quot;22.22.22.22:33080&quot; -C proxy.crt -K proxy.key</code></li>
<li>完成</li>
<li>后台运行命令后面加上<code>--daemon</code>参数即可</li>
</ol>
<h2 id="原理">原理</h2>
<p>本地的shadowsocks跑了一个代理在<code>7777</code>端口，跑的是<code>tcp</code>流量，通过内网穿透到公网服务器，即在公网的<code>28080</code>访问的是本地同类流量，所以现在外网的任何一台机子，连上了跑在vps的<code>28080</code>的shadowsocks服务，即相当于连上了内网的网络环境，当然可以访问内网的网络资源。</p>
<h3 id="注意">注意</h3>
<ul>
<li>shadowsocks的内网服务主机的使用，比如这台主机上跑了一个<code>80</code>端口的web，那我连上了公网服务器上面的shadowsocks代理后，使用的不是<code>localhost</code>访问，而应该是内网主机的内网IP，通过<code>ipconfig</code>命令查看。</li>
<li>其他用法，可以和fiddler抓包软件配合使用，可以搭配<code>ssh</code>使用，方便管理。（荐）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用过的博客程序大总结加推荐]]></title>
        <id>https://g.yzddhr.me/post/yong-guo-de-bo-ke-cheng-xu-da-zong-jie-jia-tui-jian</id>
        <link href="https://g.yzddhr.me/post/yong-guo-de-bo-ke-cheng-xu-da-zong-jie-jia-tui-jian">
        </link>
        <updated>2019-08-07T02:16:59.000Z</updated>
        <summary type="html"><![CDATA[<p>用过的博客程序很不少了，比如一开始的WordPress到typecho到hexo到hugo到ghost到zblog，到halo到solo到gridea，虽然知道搞各种花里胡哨的博客没有什么用，重要的是博客的内容，但是一个用着不顺心的博客又怎么可能能坚持下去呢，所以我认为一个好的博客程序和好的主题还是很有必要的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>用过的博客程序很不少了，比如一开始的WordPress到typecho到hexo到hugo到ghost到zblog，到halo到solo到gridea，虽然知道搞各种花里胡哨的博客没有什么用，重要的是博客的内容，但是一个用着不顺心的博客又怎么可能能坚持下去呢，所以我认为一个好的博客程序和好的主题还是很有必要的。</p>
<!-- more -->
<h2 id="更新">更新</h2>
<blockquote>
<p>2019-08-05 : 更新了博文，后面再更吧 😴</p>
</blockquote>
<h2 id="介绍">介绍</h2>
<ul>
<li>WordPress</li>
<li>typecho；zblog</li>
<li>ghost</li>
<li>hexo；hugo</li>
<li>halo</li>
<li>solo</li>
<li><strong>gridea</strong>(推荐)</li>
</ul>
<h2 id="wordpress">WordPress</h2>
<h3 id="搭建">搭建</h3>
<ul>
<li>lnmp环境（建议宝塔面板）<a href="https://bt.cn">宝塔</a></li>
<li>(或)小内存搭建wp站（见附链接）</li>
<li>wordpress官网 <a href="https://www.wordpress.com">wordpress</a></li>
</ul>
<h3 id="主题站点">主题站点</h3>
<blockquote>
<p>wp主题站：https://themeforwp.net/<br>
主题猫：http://ztmao.com/<br>
Wordpress主题站：http://www.thefox.cn/<br>
。。。</p>
</blockquote>
<h4 id="主题推荐">主题推荐</h4>
<ul>
<li><a href="https://github.com/galnetwen/H-Siren">H-Siren</a>，老哥一直还在更新，很多东西就是有点卡适合喜欢花里胡哨的同学。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-debb9a93.png" alt="Screenshot1.png"></li>
<li><a href="https://www.fczbl.vip/787.html">犬blog</a>，以前用过一段时间，还不错，后面感觉太冷清了，弃用了。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-acf3664a.png" alt="Screenshot1.png"></li>
</ul>
<h3 id="优缺点">优缺点</h3>
<ul>
<li>优：<br>
历史悠久，使用的人很多，主题体系，插件体系完善，基本有问题就能解决</li>
<li>劣：<br>
结构冗长，lnmp环境占空间大，响应速度慢，不够小巧美观。</li>
</ul>
<h2 id="typecho">typecho</h2>
<h3 id="搭建-2">搭建</h3>
<ul>
<li>lnmp环境</li>
<li>（或）<a href="https://www.moerats.com/archives/651/">利用caddy加sqlite3搭建小博客</a></li>
<li>官网 <a href="http://typecho.org/">typecho</a></li>
</ul>
<h3 id="主题">主题</h3>
<p>typecho的主题相比较WP的主题要更加漂亮简洁。</p>
<ul>
<li><a href="https://typecho.me/">typecho主题模板站</a></li>
<li><a href="https://typecho.me/">typecho wiki</a></li>
<li><a href="https://typecho.top/">typecho主题商店</a></li>
</ul>
<h4 id="主题推荐-2">主题推荐</h4>
<ul>
<li><a href="https://www.ihewro.com/archives/489/">handsome</a> （收费）很多人都在用，功能很多，作者更新也勤快。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-8caed178.png" alt="Screenshot.png"></li>
<li><a href="https://www.96sir.com/archives/134.html">destiny</a> （收费）非常漂亮的主题，价格稍贵，但是对手机端适配的非常漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-1e7adf91.png" alt="Screenshot.png"></li>
<li><a href="https://github.com/AlanDecode/Typecho-Theme-VOID">Void</a> 猴子打印机的产物，作者小熊猫，写了不少的typecho博客主题。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot-1afb0417.png" alt="Screenshot.png"></li>
<li><a href="https://qqdie.com/archives/violet-typecho-themes.html">Violet</a>（收费），知名博主，qq死，一直更新typecho的相关文章，造诣颇深。<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-81fa5a16.png" alt="Screenshot1.png"></li>
<li><a href="https://qqdie.com/archives/qingyi.html">Typecho - QingYi</a>，仿开源的论坛的一个主题<br>
<img src="https://img.hacpai.com/file/2019/08/1849124129-aa951a35.jpg" alt="1849124129.jpg"></li>
</ul>
<h3 id="优缺点-2">优缺点</h3>
<ul>
<li>优：<br>
简洁美观，主题现在也不少了，插件也挺丰富的。很多人用</li>
<li>劣：<br>
主流安装还是lnmp环境，还是感觉有点冗长，当然docker安也行。</li>
</ul>
<h2 id="hexohugo">hexo；hugo</h2>
<p>hexo和hugo都是静态的博客，但是相比较而言，hugo的生成速度更快一点，但是主题还是hexo多，所以一般还是安装hexo的多点。</p>
<h3 id="搭建-3">搭建</h3>
<ul>
<li>node环境</li>
<li>git或者静态服务器，用于反代，可选</li>
</ul>
<h3 id="主题-2">主题</h3>
<ul>
<li>官方仓库<br>
<a href="https://hexo.io/themes/index.html">hexo.io</a></li>
</ul>
<h3 id="主题推荐-3">主题推荐</h3>
<ul>
<li>
<p><a href="https://github.com/iissnan/hexo-theme-next">Next</a><br>
大名鼎鼎的next，NexT is a high quality elegant <a href="http://hexo.io/">Hexo</a> theme. It is crafted from scratch, with love.<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-555c6aa6.png" alt="Screenshot1.png"></p>
</li>
<li>
<p><a href="https://github.com/honjun/hexo-theme-sakura">Sukara</a><br>
故乡的樱花又开了，👍 ，功能很全，而且确实很巧玲，主题很新，作者更新还很积极。<br>
<img src="https://img.hacpai.com/file/2019/08/k-947e0c3e.jpg" alt="k.jpg"></p>
</li>
<li>
<p><a href="https://github.com/ppoffice/hexo-theme-icarus">ICARUS</a><br>
A simple, delicate, and modern theme for the static site generator Hexo<br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31-7603e843.png" alt="68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31.png"></p>
</li>
<li>
<p><a href="https://github.com/imzeuk/hugo-theme-zozo">ZOZO</a>，这个主题是真的简洁又漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/showcase-e91a7170.png" alt="showcase.png"></p>
</li>
<li>
<p><a href="https://github.com/SumiMakito/hexo-theme-typography">typography</a><br>
像报纸一样的阅读体验<br>
<img src="https://img.hacpai.com/file/2019/08/head-24dd838f.png" alt="head.png"></p>
</li>
<li>
<p><a href="https://github.com/smackgg/hexo-theme-smackdown">hexo-theme-smackdown</a><br>
一个比较浮夸的hexo主题，虽然说有一点脱离了简约<br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-fedc09b9.png" alt="Screenshot1.png"></p>
</li>
<li>
<p><a href="https://github.com/klugjo/hexo-theme-alpha-dust">hexo-theme-alpha-dust</a><br>
This theme was developed from scratch by myself just for fun. It is a glowy futuristic theme, hope you will find a use for it :)<br>
<img src="https://img.hacpai.com/file/2019/08/687474703a2f2f7777772e636f6465626c6f63712e636f6d2f696d672f6865786f2d7468656d652d7468756d626e61696c2f416c706861447573742e6a7067-c879598c.jpg" alt="687474703a2f2f7777772e636f6465626c6f63712e636f6d2f696d672f6865786f2d7468656d652d7468756d626e61696c2f416c706861447573742e6a7067.jpg"></p>
</li>
<li>
<p><a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a><br>
A responsive, clean and simple <a href="http://hexo.io/">Hexo</a> theme for a personal website.<br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f646f63732e676f6f676c652e636f6d2f75633f69643d314b36366263637772347a3954674a657630417a437162493742787a5672376d64-042d29ae.png" alt="68747470733a2f2f646f63732e676f6f676c652e636f6d2f75633f69643d314b36366263637772347a3954674a657630417a437162493742787a5672376d64.png"></p>
</li>
</ul>
<blockquote>
<p>推荐了很多的主题，虽说有点乱吧，但还是大多数我都有自己用过，感觉还是不错的。</p>
</blockquote>
<h3 id="优缺点-3">优缺点</h3>
<ul>
<li>优：<br>
简洁，是静态页面，所以访问速度还是挺快的，而且主题很多，而且布置起来的话，也很简洁，一般其他的博客都会适配hexo的md文件，所以迁移博客也比较简单。</li>
<li>劣：<br>
配置繁琐，主题的配置，根目录的配置都比较繁琐，而且每次的静态页面的生成也挺废时间的。</li>
</ul>
<h2 id="solo博客和halo博客">solo博客和halo博客</h2>
<p>这两种比较像，搭建起来都很容易，一起说了.</p>
<ul>
<li>solo 博客<br>
<a href="https://github.com/b3log/solo">Solo</a> 是一款小而美的开源博客系统，专为程序员设计。</li>
</ul>
<p>Solo 有着非常活跃的<a href="https://hacpai.com/">社区</a>，可将文章作为帖子推送到社区，来自社区的回帖将作为博客评论进行联动。</p>
<blockquote>
<p>这是一种全新的网络社区体验，让热爱记录和分享的你不再感到孤单！<br>
具体细节请浏览 <a href="https://hacpai.com/article/1546941897596">B3log 构思</a></p>
</blockquote>
<ul>
<li>halo 博客<br>
<strong>Halo</strong> [ˈheɪloʊ]，意为光环。当然，你也可以当成拼音读(哈喽)。</li>
</ul>
<p>轻快，简洁，功能强大，使用 Java 开发的博客系统。</p>
<h3 id="搭建-4">搭建</h3>
<ul>
<li>docker ， docker-compose</li>
<li>Java包</li>
<li>war包 ，Tomact</li>
</ul>
<h3 id="主题-3">主题</h3>
<ul>
<li>solo主题：solo的主题是本体里面内置的，换起来很方便。也够用。<br>
<img src="https://img.hacpai.com/file/2019/08/61179517afd61b00a63611e987d5ddea6d6a0fc9-0d368d02.png" alt="61179517afd61b00a63611e987d5ddea6d6a0fc9.png"></li>
<li>halo主题：<br>
不同于solo的内置，只要在主题仓库复制相应的链接，博客就可以自行下载安装。<br>
<a href="https://halo.run/theme/">主题仓库</a><br>
<img src="https://img.hacpai.com/file/2019/08/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30352f30382f356364326663623231666337362e706e67-00f618af.png" alt="68747470733a2f2f692e6c6f6c692e6e65742f323031392f30352f30382f356364326663623231666337362e706e67.png"></li>
</ul>
<h3 id="主题推荐-4">主题推荐</h3>
<ul>
<li>solo ：<br>
Bubble : 气泡，自带live2D，自带特效。<br>
<img src="https://img.hacpai.com/file/2019/08/Bubble-c1e22a77.jpg" alt="Bubble.jpg"></li>
<li>Casper : 简洁material风，文章的特征图很漂亮。<br>
<img src="https://img.hacpai.com/file/2019/08/Casper-cbcaca66.jpg" alt="Casper.jpg"></li>
</ul>
<h3 id="优缺点-4">优缺点</h3>
<ul>
<li>优<br>
首先说下有点吧，这个solo和halo博客都是完成度很高的博客，不管是在书写体验，还是前端页面上面，界面简洁漂亮，而且各有各的特点，solo的博客的图床很有特点，因为solo博客是基于黑客派这么一个社区的应用，所以作者内置了一个图床，省去了找图床的麻烦，halo博客的书写体验更棒，是基于gridea的解释器<strong>markdown</strong>工具，书写体验不亚用ios里面webn书写工具啥的，比typra感觉也更好。当然两款博客都是支持都出导入hexo的文件的。</li>
<li>劣<br>
halo博客暂时没有什么不适应的地方，要是硬说的话，主题还是太少了，而且漂亮的主题也是收费的，但是作者还在努力完善。<br>
solo博客的话，其实书写体验还是不够好，建议在<strong>markdown</strong>书写的时候可以代码高亮语句，这样层次分明更好一点。还有就是Java博客嘛，占用内存都不会小的，一般1G以上，不够的话考虑可以用虚拟内存。</li>
</ul>
<h2 id="gridea推荐"><strong>gridea</strong>（推荐）</h2>
<p>✍️一个静态博客写作客户端 (A static blog writing client)<br>
<a href="https://gridea.dev/">GRIDEA</a>是海岛心hey大佬设计的本地<strong>markdown</strong>书写工具，但是可以同步本地的文章到github或者coding，其原理和hexo，hugo是一样的，都是本地生成静态的文件然后上传支持静态资源的服务器，但是平心而论，gridea是比hexo更棒的，虽然主题数目上确实远没有hexo多，但gridea的本质上是<strong>markdown</strong>书写工具啊，在书写体验上可以说是做到了完美，而不亚于hexo主题的高完成度和美观度，这种在不是主要功能却做得如此棒的特质，确实是很难得的。</p>
<h3 id="安装">安装</h3>
<ul>
<li>下载安装包<br>
<a href="https://gridea.dev">官网</a>，下载对应安装包安装即可，全平台支持。</li>
</ul>
<h3 id="主题-4">主题</h3>
<p><a href="https://gridea.dev/themes/">主题仓库</a><br>
<img src="https://img.hacpai.com/file/2019/08/Screenshot1-6b4f86b9.png" alt="Screenshot1.png"></p>
<blockquote>
<p>个人推荐的是gridea的主题Walker，只要6RMB，还是可以接受的，而且却是漂亮的。</p>
</blockquote>
<h3 id="优缺点-5">优缺点</h3>
<ul>
<li>优：<br>
在一款好用的书写工具的同时，兼顾了博客生成器的功能，对数学公式的支持很棒。</li>
<li>劣：<br>
暂时不能自动同步github和coding以外的容器，并且迁移博客是需要手动本分相应的配置源文件夹的。</li>
</ul>
<h2 id="免费的博客资源">免费的博客资源</h2>
<ul>
<li>微博</li>
<li>微软的Blogger : <a href="https://www.blogger.com/">https://www.blogger.com</a></li>
<li>carrd.co : <a href="https://carrd.co/">https://carrd.co/</a></li>
</ul>
<h2 id="附链接">附链接</h2>
<ul>
<li><a href="https://www.moerats.com/archives/651/">小内存VPS安装Caddy+PHP 7+Sqlite 3环境，并快速搭建Typecho博客</a></li>
<li><a href="https://www.moerats.com/archives/749/">小内存VPS一键安装Typecho/WordPress/Zblog/Kodexplorer及整站备份等</a></li>
<li><a href="https://www.moerats.com/archives/689/">Caddy环境下一些Web应用程序的配置参考</a></li>
<li><a href="https://www.moerats.com/archives/656/">Caddy环境下WordPress博客伪静态设置</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[solo博客搭建配置SSl]]></title>
        <id>https://g.yzddhr.me/post/solo-bo-ke-da-jian-pei-zhi-ssl</id>
        <link href="https://g.yzddhr.me/post/solo-bo-ke-da-jian-pei-zhi-ssl">
        </link>
        <updated>2019-08-03T11:41:18.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>solo博客&quot;专为程序员设计的博客&quot;<br>
<a href="https://github.com/b3log/solo">GitHub</a></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>solo博客&quot;专为程序员设计的博客&quot;<br>
<a href="https://github.com/b3log/solo">GitHub</a></p>
</blockquote>
<!-- more -->
<blockquote></blockquote>
<p>本文利用docker以及docker-compose搭建solo博客并配置SSL.</p>
<h2 id="solo效果图">solo效果图:</h2>
<p><img src="https://g.yzddhr.me/post-images/1564833531441.PNG" alt=""></p>
<h2 id="环境">环境</h2>
<h3 id="安装docker">安装docker</h3>
<pre><code>curl -sSL https://get.docker.com/ | sh 
systemctl start docker 
systemctl enable docker
</code></pre>
<h3 id="安装docker-compose">安装docker-compose</h3>
<ul>
<li>利用pip安装:<br>
<code>pip install docker-compose</code></li>
<li>利用静态文件安装</li>
</ul>
<pre><code>curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<h2 id="编辑docker-compose文件">编辑docker-compose文件</h2>
<p>编辑文件:<br>
<code>vi docker-compose.yml</code><br>
写入:</p>
<pre><code>version: &quot;2&quot;                                                                                                              
                                                                                                                         
services:                                                                                                                 
 mysql:                                                                                                                  
   container_name: mysql                                                                                                 
   image: mysql:5.5.60                                                                                                   
   restart: always                                                                                                       
   volumes:                                                                                                              
     - ./mysql/data:/var/lib/mysql                                                                                       
     - ./mysql/conf/mysqld.conf:/etc/mysql/mysql.conf.d/mysqld.cnf                                                       
   ports:                                                                                                                
     - &quot;6603:3306&quot;                                                                                                       
   environment:                                                                                                          
     - MYSQL_ROOT_PASSWORD=数据库密码                                                                                     
 solo:                                                                                                                   
   container_name: solo                                                                                                  
   image: b3log/solo                                                                                                     
   restart: always                                                                                                       
   ports:                                                                                                                
     - &quot;8080:8080&quot;                                                                                                       
   environment:                                                                                                          
     RUNTIME_DB: &quot;MYSQL&quot;                                                                                                 
     JDBC_USERNAME: &quot;root&quot;                                                                                               
     JDBC_PASSWORD: &quot;数据库密码&quot;                                                                                          
     JDBC_DRIVER: &quot;com.mysql.jdbc.Driver&quot;                                                                                
     JDBC_URL: &quot;jdbc:mysql://mysql:3306/solo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&quot;     
   command: --listen_port=8080 --server_scheme=http --server_host=域名或IP 
</code></pre>
<p>启动容器:<br>
<code>docker-compose up -d</code><br>
在<code>docker-compose.yml</code>的文件夹下会生成MySQL的文件夹;进入文件夹:配置数据库;依次输入以下命令:<br>
<code>docker exec -it database bash</code><br>
<code>mysql -uroot -p</code>输入密码登入mysql<br>
依次执行</p>
<pre><code>CREATE DATABASE `solo` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER 'solouser'@'%' identified BY 'solo@pwd';
GRANT ALL ON solo.* TO 'solouser'@'%'; 
FLUSH PRIVILEGES;
</code></pre>
<p>重新<code>docker-compose up -d</code>.</p>
<h2 id="配置solo的ssl">配置solo的SSL</h2>
<p>因为用nginx容器反代需要主域名,用二级域名反代会发生错误:当然有主域名,也想用主域名的可以参照<a href="https://github.com/liumapp/solo-in-docker/">docker-in-solo</a>配置https<br>
以下使用cloudflare生成SSL</p>
<ul>
<li>修改<code>docker-compose.yml</code>文件中的<code>solo</code>容器的端口为哦<code>80</code></li>
<li>修改<code>solo</code>容器的<code>sever_host</code>参数为域名;修改<code>server_scheme</code>参数为<code>https</code></li>
<li>cloudflare开启<code>强制SSL</code>,开启<code>小黄云</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费申请AWS的Educate Starter教育版账号]]></title>
        <id>https://g.yzddhr.me/post/mian-fei-shen-qing-aws-de-educate-starter-jiao-yu-ban-zhang-hao</id>
        <link href="https://g.yzddhr.me/post/mian-fei-shen-qing-aws-de-educate-starter-jiao-yu-ban-zhang-hao">
        </link>
        <updated>2019-08-03T07:32:33.000Z</updated>
        <summary type="html"><![CDATA[<p>申请免费的AWS云服务器（不需要信用卡),</p>
]]></summary>
        <content type="html"><![CDATA[<p>申请免费的AWS云服务器（不需要信用卡),</p>
<!-- more -->
<p>AWS还是一如既往的财大气粗,想当年某宝买的8元的虚拟信用卡撸了AWS一年的云服务器,后来还是流量超了15G才没用的.现在水篇Educate Starter的 申请教程.</p>
<h2 id="条件">条件</h2>
<ul>
<li>学生邮箱(EDU邮箱)</li>
</ul>
<h2 id="申请">申请</h2>
<p>其实关于EDU邮箱的获取有很多方法,但是其实每个学校都有自己的EDU邮箱,不过很多人不用就是了.可自行Google申请.</p>
<ol>
<li>进入AWS官网</li>
</ol>
<p>地址:</p>
<blockquote>
<p>https://aws.amazon.com/tw/education/awseducate/</p>
</blockquote>
<p>申请页面，有关于详细的AWS Educate的计划，有兴趣的可以看一看，如果和我一样比较浮躁的话，直接点击”加入AWS Educate”即可开始申请了。</p>
<p>在申请过程中，需要主要的是一定要选在校学生本科那个选项，至于邮箱那一栏请填写你的edu邮箱。之后你会收到一封验证邮箱的邮件，点击链接验证即可。之后需要等待Amazon进行审核。<br>
<img src="https://g.yzddhr.me/post-images/1564817956766.jpg" alt=""></p>
<ol start="2">
<li>
<p>审核完毕<br>
审核完毕后会发个连接过来设置密码<br>
<img src="https://g.yzddhr.me/post-images/1564817980744.PNG" alt=""><br>
<img src="https://g.yzddhr.me/post-images/1564818048104.jpg" alt=""><br>
可以看见，账户上有75美元，美元的有效期限为365天！！！点击黄色的Button进入你的控制台吧！！！<br>
注意在进入控制台的时候会有选择你要登入的账户,有账户的话直接选上面的&quot;已经有AWS的账户&quot;,这边我没有账户,(因为注册AWS要绑定信用卡啊),选下面的&quot;用Educate Starter账户&quot;<br>
<img src="https://g.yzddhr.me/post-images/1564818272029.PNG" alt=""></p>
</li>
<li>
<p>使用</p>
</li>
</ol>
<p>后面就是创建虚机的过程了,以前应该是有75刀的,不知道现在是什么情况,就30刀了,但是注意,这个是你的信用额度,是指在免费的套餐之外的,超额部分收费可以抵扣的额度,而AWS的机子,只要注意每月上行下行的各15G流量限制就行了,一般不会用超的.<br>
<img src="https://g.yzddhr.me/post-images/1564818486856.PNG" alt=""></p>
<ul>
<li>进入控制台<br>
<img src="https://g.yzddhr.me/post-images/1564818651310.PNG" alt=""></li>
<li>熟悉的创建界面<br>
<img src="https://g.yzddhr.me/post-images/1564818674973.PNG" alt=""></li>
</ul>
<blockquote>
<p>后续的化直接用putty什么xshell什么ssh连上就能用了</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github pages开启ssl+CDN]]></title>
        <id>https://g.yzddhr.me/post/github-pages-kai-qi-sslcdn</id>
        <link href="https://g.yzddhr.me/post/github-pages-kai-qi-sslcdn">
        </link>
        <updated>2019-08-02T08:28:56.000Z</updated>
        <summary type="html"><![CDATA[<p>用github能做很多事，</p>
]]></summary>
        <content type="html"><![CDATA[<p>用github能做很多事，</p>
<!-- more -->
<p>除了各种代码托管，现在github越来越大气，开放了个人私有仓库无限开，而且能用来搭建hexo博客之类的，配合jsdeliver的话，github仓库本身就能当CDN用。</p>
<h2 id="条件需求">条件需求</h2>
<ul>
<li>github账户 <a href="http://github.com">GitHub</a></li>
<li>cloudflare账户 <a href="http://cloudflare.com">cloudflare</a></li>
</ul>
<h2 id="搭建github-pages">搭建GitHub pages</h2>
<p>搭建GitHub的博客主要有三种方式</p>
<ul>
<li>hexo , hugo 等静态博客</li>
<li>利用GitHub gist api搭建动态博客 <a href="https://github.com/GitHub-Laziji/vblog">地址</a></li>
<li>借助grides搭建静态的html博客 <a href="https://github.com/getgridea/gridea">地址</a></li>
</ul>
<h2 id="配置caname">配置CANAME</h2>
<ul>
<li>配置的自定义域名不能开启<code>ssl</code>,会和后面的cloudflare冲突,报错.</li>
<li>cloudflare的设置必须在GitHub的自定义域名生效之后才能操作.</li>
</ul>
<h2 id="配置cloudflare">配置cloudflare</h2>
<ul>
<li><code>DNS</code>接入cloudflare</li>
<li>设置小黄云</li>
<li>开启强制<code>SSL</code></li>
</ul>
<h2 id="效果">效果</h2>
<p><img src="https://g.yzddhr.me/post-images/1564735240178.PNG" alt=""><br>
显示是cloudflare的证书,说明配置成功.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gossa和mpv的结合用法]]></title>
        <id>https://g.yzddhr.me/post/gossa-he-mpv-de-jie-he-yong-fa</id>
        <link href="https://g.yzddhr.me/post/gossa-he-mpv-de-jie-he-yong-fa">
        </link>
        <updated>2019-08-01T10:21:10.000Z</updated>
        <summary type="html"><![CDATA[<p>实现的目标：</p>
<blockquote>
<p>实现用本地用mpv播放器播放vps的文件,本来也是非常简单的东西,代替ftp用下而已,不然每次用ftp还是有其不好用的地方.</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>实现的目标：</p>
<blockquote>
<p>实现用本地用mpv播放器播放vps的文件,本来也是非常简单的东西,代替ftp用下而已,不然每次用ftp还是有其不好用的地方.</p>
</blockquote>
<!-- more -->
<h2 id="安装gossa">安装gossa</h2>
<p>项目地址 : <a href="https://github.com/pldubouilh/gossa">GOSSA</a><br>
登陆<code>ssh</code><br>
使用命令:</p>
<pre><code class="language-shell">wget https://github.com/pldubouilh/gossa/releases/download/v0.0.7/gossa-linux64
mv gossa-linux64 /usr/local/bin/gossa
#授权
chmod +x /usr/local/bin/gossa
</code></pre>
<p>启动程序:</p>
<pre><code>gossa /root/moerats
</code></pre>
<p>默认端口是<code>8001</code>,不要忘了后台打开8001端口,并且这个是在本地启动的.其他大方访问使用:</p>
<pre><code>gossa -h 0.0.0.0 /root/moerats
#后台运行
nohup gossa -h 0.0.0.0 /root/moerats &amp;
</code></pre>
<h2 id="安装mpv">安装mpv</h2>
<p>下载mpv编译好的文件:<br>
<a href="https://mpv.io/installation/">MPV官网</a><br>
下载好后是个7z文件夹,解压后添加到环境变量:<code>此电脑右键属性 --&gt; 环境变量 --&gt; 添加path变量</code>自行设置.</p>
<h2 id="使用">使用</h2>
<p>用上下键使用,右击获得文件的链接,直接<code>mpv URL</code>即可.</p>
<h2 id="补充">补充</h2>
<blockquote>
<p>待完成</p>
</blockquote>
<ul>
<li>mpv的用法</li>
<li>mpv的进阶用法</li>
</ul>
]]></content>
    </entry>
</feed>